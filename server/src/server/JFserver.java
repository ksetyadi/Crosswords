/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server;

import java.awt.Color;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author thiego
 */
public class JFserver extends javax.swing.JFrame {

    /**
     * Creates new form JFserver
     */
    private ServerSocket serverSocket;
    public static String[][] matrix;
    public static final int RIGHT = 0;
    public static final int DIAGONAL = 1;
    public static final int DOWN = 2;
    public ObjectOutputStream outpout;
    public ObjectInputStream input;
    public String position=null;
    String msg, words;
    Socket socket;
    boolean result=false;
    
    public JFserver() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setRows(8);
        jTextArea2.setTabSize(50);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("CONSOLE:");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server - Crosswords with Sockets");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(8);
        jTextArea3.setTabSize(50);
        jScrollPane3.setViewportView(jTextArea3);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("CONSOLE:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("STATUS:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("AGUARDANDO");
        jLabel4.setToolTipText("");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("WORD:");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton2.setText("ENVIAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(21, 21, 21))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField3)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
   
        words = jTextField3.getText();
        System.out.println(words);
        try {
        while(result){
            // check the input
            if (!isValid(words)) {
                System.out.println("As palavras inseridas não foram válidas.");
                JOptionPane.showMessageDialog(rootPane, "As palavras inseridas não foram válidas.");
                jTextArea3.append("As palavras inseridas não foram válidas.\n");
            } else {
                // process the input to create the crosswords
                
                result=true;
            }
        }
            msg = showCrosswords(words);
            outpout.writeUTF(msg);
            outpout.flush();
            System.out.println("Aguardando resposta do desafio...");
            jTextArea3.append("Aguardando resposta do desafio...\n");
            JOptionPane.showMessageDialog(rootPane, "Aguardando resposta do desafio...");
            boolean check=false;
            while(!check){
                msg = input.readUTF();
                System.out.println("Resposta recebida: "+msg);
                jTextArea3.append("Resposta recebida: "+msg+"\n");
            if (msg.trim().toUpperCase().equals(words.trim().toUpperCase())) {
                System.out.println("Resposta correta!");
                jTextArea3.append("Resposta correta!\n");
                JOptionPane.showMessageDialog(rootPane, "Resposta correta!");
                check=true;
                        try {
                            //outpout.writeBoolean(check);
                            jTextField3.setText("");
                            jTextField3.setEnabled(false);
                            jButton2.setEnabled(false);
                            jLabel4.setText("AGUARDANDO");
                            jLabel4.setForeground(Color.BLACK);
                            outpout.writeBoolean(check);
                            outpout.flush();
                            //fechaSocket(socket);
                            jTextArea3.append("Cliente finalizado\n");
                            System.out.println("Cliente finalizado\n");
                            
                        } catch (IOException ex) {
                            Logger.getLogger(JFserver.class.getName()).log(Level.SEVERE, null, ex);
                        }
            }else{
                System.out.println("Resposta incorreta, aguardando nova tentativa...");
                jTextArea3.append("Resposta incorreta, aguardando nova tentativa...\n");
                outpout.writeBoolean(check);
                outpout.flush();
            }
            }
            input.close(); //fecha stream de entrada
            outpout.close(); // fecha stream de saída
            novaConexao();
        } catch (IOException ex) {
            Logger.getLogger(JFserver.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Erro: "+ex.getMessage());
        } finally{
            try {
                fechaSocket(socket);
            } catch (IOException ex) {
                Logger.getLogger(JFserver.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    void novaConexao(){
        try{
            jButton2.setEnabled(false);
            jTextField3.setEnabled(false);
            System.out.println("Aguardando conexão...");
            jTextArea3.append("Aguardando conexão...\n");
            JOptionPane.showMessageDialog(rootPane, "Aguardando conexão...");
            socket = esperaConexao();
            System.out.println("Cliente conectado");
            jTextArea3.append("Cliente conectado\n");
            JOptionPane.showMessageDialog(rootPane, "Cliente conectado");
            jLabel4.setText("CONECTADO");
            jLabel4.setForeground(Color.BLUE);
            trataConexao(socket);            
        }catch(IOException e){
            JOptionPane.showMessageDialog(rootPane, "Erro: "+e.getMessage());
        }
        jButton2.setEnabled(true);
        jTextField3.setEnabled(true);
        jTextField3.requestFocus();
    }
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            criarServerSocket(5555);
            //while (true) {                
                novaConexao();
            //}
        } catch (IOException ex) {
            Logger.getLogger(JFserver.class.getName()).log(Level.SEVERE, null, ex);
        }
       
    }//GEN-LAST:event_formWindowOpened
    
    public void criarServerSocket(int porta) throws IOException{
        serverSocket = new ServerSocket(porta);
    }
    
    public Socket esperaConexao() throws IOException{
        socket = serverSocket.accept();
        return socket;
    }
    
    public void trataConexao(Socket socket) throws IOException{
        outpout = new ObjectOutputStream(socket.getOutputStream());
        input = new ObjectInputStream(socket.getInputStream());
        msg = input.readUTF();
        System.out.println("Mensagem recebida de " +msg);
        jTextArea3.append("Mensagem recebida de " +msg+"\n");
        JOptionPane.showMessageDialog(rootPane, "Mensagem recebida de " +msg);
        jTextField3.setEnabled(true);
        jButton2.setEnabled(true);
        System.out.println("Entre com uma palavra relacionada com SD de até 9 caracteres");
        JOptionPane.showMessageDialog(rootPane, "Entre com uma palavra relacionada com SD de até 9 caracteres");
        jTextArea3.append("Entre com uma palavra relacionada com\nSD de até 9 caracteres");
        jTextField3.requestFocus();
    }
    
    public void fechaSocket(Socket s) throws IOException{
        s.close();
    }
    
    public static boolean isValid(String words) {
		// check for the null value
		if (words == null) {
			return false;
		}
		
		String[] arrWord = words.split(" ");
		
		// check if the array's length is less then 3
		if (arrWord.length != 1) {
			return false;
		}
		
		// check if each words not exceed 10 chars length
		for (int counter = 0; counter <= arrWord.length - 1; counter++) {
			if (arrWord[counter].length() > 9) {
				return false;
			}
		}
		
		// we can check for more conditions here but I think it's enough
		// to have those basic conditions
		
		return true;
	}
	
	public static String showCrosswords(String words) throws IOException {
            	
                String[] arrWord = words.split(" ");
		
		// create a matrix of 10x10
		matrix = new String[10][10];
		String reply = null;
		// fill it with asterix
		for (int row = 0; row <= 9; row++) {
			for (int col = 0; col <= 9; col++) {
				matrix[row][col] = "*";
			}
		}
		
		// put the 3 words randomly in matrix
		for (int counter = 0; counter <= arrWord.length - 1; counter++) {
			String word = arrWord[counter];
			putWord(word);
		}
	
		// formed the final crossword
		// put random chars on unoccupied cells
		
		System.out.println();
		reply = "\n";
		reply = ("X" + " 1 2 3 4 5 6 7 8 9 0\n");
		
		for (int row = 0; row <= 9; row++) {
			for (int col = 0; col <= 9; col++) {
				if (matrix[row][col].equals(("*"))) {
					matrix[row][col] = anyRandomChar();
				}
				
				if (col == 0) {
					reply = reply + (((row + 1) % 10) + " " + matrix[row][col] + " ");
				} else {
					reply = reply + (matrix[row][col] + " ");
				}
			}
			reply = reply + ("");
                        if(row!=9)
                            reply = reply + ("\n");
		}
                JFserver jfs = new JFserver();
                return reply;
	}
	
	public static void putWord(String word) {
		System.out.println("Tentando adiconar a palavra: " + word);
		Random random = new Random();
		boolean isPutted = false;
		while (!isPutted) {
			int row = random.nextInt(10 - word.length() + 1);
			int col = random.nextInt(10 - word.length() + 1);
			int direction = random.nextInt(3);
			
			boolean isClear = true;

			switch (direction) {
			case RIGHT:
				for (int counter = col; counter <= col + word.length() - 1; counter++) {
					if (!matrix[row][counter].equals("*")) {
						isClear = false;
					}
				}
				if (isClear) {
					for (int counter = col; counter <= col + word.length() - 1; counter++) {
						matrix[row][counter] = word.substring(counter - col, counter - col + 1).toUpperCase();
					}
					
					System.out.println("A palavra " + word + " está adicionada a DIREITA em " + (row + 1) + ", " + (col + 1));
                                        
                                        isPutted = true;
				}
				break;
			case DIAGONAL:
				int cols = col;
				for (int pos = row; pos <= row + word.length() - 1; pos++) {
					if (!matrix[pos][cols++].equals("*")) {
						isClear = false;
						break;
					}
				}
				
				if (isClear) {
					cols = col;
					
					for (int pos = row; pos <= row + word.length() - 1; pos++) {
						matrix[pos][cols++] = word.substring(pos - row, pos - row + 1).toUpperCase();
					}
					
					System.out.println("A palavra " + word + " está adicionada DIAGONALMENTE em " + (row + 1) + ", " + (col + 1));
					isPutted = true;
				}
				break;
				
			case DOWN: 
				for (int counter = row; counter <= row + word.length() - 1; counter++) {
					if (!matrix[counter][col].equals("*")) {
						isClear = false;
					}
				}
				
				if (isClear) {
					for (int counter = row; counter <= row + word.length() - 1; counter++) {
						matrix[counter][col] = word.substring(counter - row, counter - row + 1).toUpperCase();
					}
					System.out.println("A palavra " + word + " está adicionada PARA BAIXO em " + (row + 1) + ", " + (col + 1));
                                        isPutted = true;
				}
				
				break;
			}
		}
	}
        
    public static String anyRandomChar() {
            Random random = new Random();
            String result = new String(Character.toChars(65 + random.nextInt(26)));
            //System.out.println("Random char: " + result);
            return result;
    }
    
    
    public void enviarWord(){
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFserver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFserver().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
